.. -*- coding: utf-8 -*-

.. _vue_plone_layout:

=====================
La vue "plone_layout"
=====================

Cette vue fournit des méthodes relatives à la mise en page.

Détails dans :class:`plone.app.layout.globals.interfaces.ILayoutPolicy`

.. list-table:: plone_layout
   :widths: 20 60
   :header-rows: 1

   * - Attribut - Méthode
     - Description
   * - ``mark_view(view)``
     - Ajoute une :term:`interface marqueur` à la vue si celle-ci est "la" vue
       pour l'objet de contexte. Cette conction ne devrait être appellée que
       depuis une template.
   * - ``hide_columns(column_left, column_right)``
     - Fournit la classe CSS pour masquer les colonnes de portlets vides. Vous
       aurez rarement à utiliser ce genre de méthode.
   * - ``have_portlets(manager_name, view=None)``
     - Détermine si une colonne de portlets est affichée. La colonne de gauche
       est appellée ``plone.leftcolumn``, celle de droite ``plone.rightcolumn``.
   * - ``icons_visible()``
     - ``True`` si les icônes doivent être affichées. Voir ``getIcon(item)``
       ci-dessous.
   * - ``getIcon(item)``
     - Retourne un objet qui implémente l'interface :class:`IContentIcon` qui
       fournit les informations et services nécessaires au rendu d'une
       icône. L'élément de contexte doit être adaptable à
       :class:`IContentIcon`. Les icônes peuvent être désactivés globalement ou
       seulement aux anonymes avec la propriété ``icon_visibility`` de l'objet
       ``portal_properties/site_properties``.
   * - ``renderBase()``
     - L'URL devant figurer dans la balise ``<base...>`` du ``<head>``
       HTML. Vous aurez rarement l'occasion d'utiliser cette méthode.
   * - ``bodyClass(template, view)``
     - Retourne la classe CSS à utiliser sur le tag ``<body>`` lors de la
       publication de la page courante. Comme la plupart des templates de base
       sont déjà fournies par Plone, vous n'aurez dans les faits que très
       rarement l'occasion d'utiliser cette méthode.

.. todo:: A traduire
