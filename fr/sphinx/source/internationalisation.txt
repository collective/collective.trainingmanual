.. -*- coding: utf-8 -*-

.. _internationalisation:

===================================
Internationalisation d'un composant
===================================

Plone est multilingue. Cette partie explique comment rendre votre composant
disponible en plusieurs langues.

.. admonition::
   Internationalisation et localisation

   Nous distinguerons l'**internationalisation** (:term:`i18n`), qui consiste à
   utiliser l'API de production de textes dans le code Python et les templates,
   de la **localisation** (:term:`l10n`), qui consiste à fournir la traduction
   des labels produits lors de durant l'internationalisation.

Internationaliser un composant
==============================

Connaissances requises
----------------------

Nous recommandons aux lecteurs de prendre préalablement connaissance des
mécanismes standard d'internationalisation des applications, basé sur le
standard "GNU-gettext" http://fr.wikipedia.org/wiki/Gettext

Les amateurs de détails pourront se reporter à la documentation complète en
anglais ici : http://www.gnu.org/software/gettext/manual/gettext.html

Notion de domaine
-----------------

Plone et plus généralement Zope (puisque nous parlons d'internationalisation
Zope) sont des écosystèmes générant des centaines de composants d'extension sur
l'utilité desquels nous ne reviendrons pas ici. Un intégrateur est susceptible
de mixer nombre parmi ces composants.

Ceci risque donc d'amener nombre de conflits de labels, le même label pouvant
être traduit différemment selon l'emploi qui en est fait.

Pour éviter ceci, le standard "gettext" définit la notion de "domaine" qui
est un espace de nommage pour les traductions de labels. Ainsi le label "foo"
peut être traduit différemment dans autant de domaines distincts.

Dès lors qu'un composant propose une interface utilisateurs comportant du texte,
il doit déclarer son domaine et le répertoire racine des traductions
(traditionnellement, le répertoire :file:`locales/` de votre egg). Vous allez
donc ajouter au fichier :file:`configure.zcml` principal de votre composant les
ligne suivantes :

.. code-block:: xml

    <configure
        xmlns="http://namespaces.zope.org/zope"
        xmlns:i18n="http://namespaces.zope.org/i18n"
        i18n_domain="AgileKnowledgeBase">
        ...
        <i18n:registerTranslations directory="locales" />
        ...
    </configure>

Code Python
-----------

Vous placez ensuite dans le :file:`__init__.py` principal de votre composant les
lignes suivantes :

.. code-block:: python

   from zope.i18nmessageid import MessageFactory
   MyMessageFactory = MessageFactory('AgileKnowledgeBase')


.. admonition::
   Écrit en C

   Afin d'optimiser les performances, les primitives des :class:`MessageFactory`
   sont écrites en C.

Lorsque vous voulez placer un texte susceptible d'être traduit dans votre code,
vous devez procéder ainsi.

.. code-block:: python

   from Products.AgileKnowledgeBase import MyMessageFactory as _
   # ...
   def foo(bar):
       message = _(u'my_message', default=u"Some words")
       # ...

.. sidebar::
   Utiliser les labels du domaine "plone"

   Pour raison de cohérence globale de votre site, il est recommandé, dans la
   mesure du possible de reprendre les traductions déjà fournies par Plone. Pour
   effectuer ceci dans du code Python :

   .. code-block:: python
   
     from Procucts.CMFPlone import PloneMessageFactory as p_
     # ...
     def foo(value):
         # ...
         message = p_(u'Save') # Traduit en français par "Enregistrer"

   Dans ce cas particulier, il n'est pas utile de fournir le paramètre nommé
   ``default`` à la messagefactory.


Quelques explications :

- Le symbole ``_`` est un identificateur Python légal. Comme nous le verrons par
  la suite, :command:`i18ndude` cherche dans tout le code Python de votre
  composant l'utilisation de cette fonction pour élaborer les modèles de
  dictionnaires (fichier :file:`*.pot`).

- ``my_message`` est le label de traduction qui figurera, après traitement par :command:`i18ndude` dans le modèle de dictionnaire :file:`*.pot` de votre composant.

- ``Some words`` est le texte par défaut, en anglais, du label ``my_message``
  qui sera fourni aux visiteurs du site en l'absence de traduction spécifique
  pour son langage. Bien que, comme la syntaxe l'indique, le paramètre nommé
  ``default`` n'est pas obligatoire (votre code ne plantera pas) son utilisation
  est fortement recommandée.

.. rubric:: Messages avec variables

Il est parfois nécessaire d'introduire des parties variables dans les messages à
traduire. Par exemple : "Ce dossier contient 5 image(s)". Utilisez pour ceci le
paramètre nommé ``mapping`` ayant pour valeur un dictionnaire (ou objet
quelconque ayant le même protocole) fournissant **toutes** les clés prévues par
les emplacements réservés aux variables dans le message. Ces emplacements
variables sont marqués dans le message sous la forme ``${clé}``.

.. code-block:: python
   
   def bar(value):
       # ...
       msg_map = {'count': value}
       message = _(u'images_in_folder',
                   default=u"This folder has ${count} images",
                   mapping=msg_map)

Templates ZPT
-------------

.. todo:: expliquer le marquage des templates

Note : utilisez tout le temps **i18n:translate=""** dans vos templates,
même si vous appelez une fonction qui retourne un objet Message (une chaine
commencant par "_(" dans votre code Python). Bien que la traduction marcherait
sans le préciser avec le moteur de template d'origine, cela ne marcherait pas
avec le moteur de template alternatif Chameleon qui peut être utilisé dans
Plone 4.

Localiser un composant
======================

.. index:: i18ndude

Créez un environnement avec i18ndude installé :

.. code-block:: sh

    $ mkvirtualenv i18n
    $ easy_install i18ndude

Dans :file:`Products/AgileKnowledgeBase` créez un script
:command:`update-l10n.sh` :

.. code-block:: sh

    $ i18ndude rebuild-pot --pot i18n/kb-plone.pot --create plone profiles
    $ i18ndude filter i18n/kb-plone.pot \
        ~/.buildout/eggs/plone.app.locales-3.3.1-py2.4.egg/plone/app/locales/i18n/plone.pot \
         > i18n/kb-plone.pot_
    $ mv i18n/kb-plone.pot_ i18n/kb-plone.pot
    $ i18ndude sync --pot i18n/kb-plone.pot i18n/kb-plone-*.po

    $ i18ndude rebuild-pot --pot locales/AgileKnowledgeBase.pot --create AgileKnowledgeBase .
    $ i18ndude sync --pot locales/AgileKnowledgeBase.pot locales/*/LC_MESSAGES/AgileKnowledgeBase.po

Exécutez ``i18ndude -h`` pour savoir à quoi servent les différentes commandes.

Installez le package Ubuntu *gettext* qui contient notamment la commande *msginit*. Installez également poedit (ou kbabel) pour traduire facilement :

.. code-block:: sh

    $ sudo apt-get install gettext poedit

Exécutez le script *update-l10n.sh*, pour cela ajoutez le mode exécution :

.. code-block:: sh

    $ chmod u+x update-l10n.sh
    $ ./update-l10n.sh

La première exécution du script échouera pour les commandes ``i18ndude sync`` car il n'y a encore aucune traduction.

Vous allez donc maintenant initialiser la traduction française :

.. code-block:: sh

    $ msginit -i i18n/kb-plone.pot -o i18n/kb-plone-fr.po

La commande *msginit* fait une copie du fichier pot en fichier po et remplie certains headers comme la date et le traducteur.

Ouvrez ensuite kb-plone-fr.po pour finir de remplir les headers.
Remplacez notamment PACKAGE par AgileKnowledgeBase, supprimez VERSION et surtout modifiez ces headers :

.. code-block:: po

    "Language-Code: fr\n"
    "Language-Name: French\n"

Vous pouvez maintenant passer à la traduction :

.. code-block:: sh

    $ poedit i18n/kb-plone-fr.po

Vous utiliserez le dossier i18n uniquement pour le domaine *plone*.


Pour le domaine de votre produit, vous utiliserez le nouveau dossier *locales* qui est le standard gettext.

Pour le domaine *AgileKnowledgeBase*, il vous faut tout d'abord créer le dossier :

.. code-block:: sh

    $ mkdir -p locales/fr/LC_MESSAGES

Générez le fichier AgileKnowledgeBase.pot avec le script :

.. code-block:: sh

    $ ./update-l10n.sh

Ensuite créez le fichier de traduction :

.. code-block:: sh

    $ msginit -i locales/AgileKnowledgeBase.pot -o locales/fr/LC_MESSAGES/AgileKnowledgeBase.po

éditez les headers du fichier po comme ceci :

.. code-block:: po

    "Language-Code: fr\n"
    "Language-Name: French\n"
    "Domain: AgileKnowledgeBase\n"

Traduisez ensuite avec poedit.

Pour que vos traductions soient prises au démarrage de l'instance, vous devez
également avoir la directive *i18n:registerTranslations* dans votre
*configure.zcml*, par exemple :

.. code-block:: xml

    <configure
        xmlns="http://namespaces.zope.org/zope"
        xmlns:grok="http://namespaces.zope.org/grok"
        xmlns:i18n="http://namespaces.zope.org/i18n"
        i18n_domain="AgileKnowledgeBase">

        <i18n:registerTranslations directory="locales" />

        <grok:grok package="." />

    </configure>


Ressources
==========
- http://plone.org/documentation/how-to/product-skin-localization
- http://plone.org/documentation/how-to/i18n-for-developers
- http://www.mattdorn.com/content/plone-i18n-a-brief-tutorial/
- http://maurits.vanrees.org/weblog/archive/2007/09/i18n-locales-and-plone-3.0
- http://dev.plone.org/plone/wiki/TranslationGuidelines
- http://n2.nabble.com/Recipe-for-overriding-translations-td3045492ef221724.html

Voir http://dev.plone.org/plone/ticket/9090 pour l'état de la fusion des documents ci-dessus.

Exercice
========
Traduction du template de mail créé précédemment.
