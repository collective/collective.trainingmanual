.. -*- coding: utf-8 -*-

.. _deploiement_backup:

=====================
Déploiement et backup
=====================

.. contents:: :local:

Définition
==========

Le déploiement d'un site Plone requiert des options particulières. Par exemple,
nous voulons être sûr qu'une configuration d'un buildout produit la même chose
aujourd'hui ou dans un an.

Savoir
======

- Profil buildout de déploiement
- Mettre en place un backup de la ZODB
- Apache
- Varnish
- HAproxy
- CacheFu / plone.app.caching
- Supervisor

Profil de déploiement
=====================

.. sidebar::
   Rappel

   Vous pouvez réviser vos connaissances sur :term:`buildout` en relisant le
   chapitre :ref:`buildout_plone3`.

Créez un fichier :file:`deployment.cfg` :

.. centered:: :file:`deployment.cfg`

.. literalinclude:: ./deploiement_buildout/deployment.cfg
    :language: cfg

Relancez le buildout avec :command:`bin/buildout -c deployment.cfg`.

Vous allez créer un utilisateur zope qui servira pour lancer le
proxy cache varnish, le load balancer HAproxy et les instances zope.

.. code-block:: sh

    $ sudo adduser zope

Supervisor
==========
.. todo:: configuration supervisord

Le buildout génère le fichier :file:`etc/supervisord.conf`.

Tous les processus sont gérés par supervisor.

Pour lancer supervisor, lancez le daemon en tant que super utilisateur
qui lancera tous les processus ayant autostart=true (par defaut) : ::

    $ sudo bin/supervisord

(varnish et haproxy ont besoin d'être démarré en root pour activer
certaines options. Les processus sont ensuite forker pour utiliser
l'utilisateur zope)

Pour redémarrer un processus par exemple instance1 : ::

    $ bin/supervisorctl restart instance1

Pour stopper : `stop`, pour démarrer : `start`.

Pour tout redémarrer : ::
    
    $ bin/supervisorctl restart all

Pour arrêter supervisor et donc tous les processus : ::

    $ bin/supervisorctl shutdown

Support des backups
===================

Pour les backups, c'est la section ``backup``.

.. literalinclude:: ./deploiement_buildout/buildout.cfg
    :language: cfg
    :prepend: [backup]
    :start-after: [backup]

Vous avez par défaut les options suivantes :

.. code-block:: cfg

    location = ${buildout-directory}/var/backups
    snapshotlocation = ${buildout-directory}/var/snapshotbackups

`Plus d'informations sur les options de la recipe
<http://pypi.python.org/pypi/collective.recipe.backup>`__

Pour exécuter la sauvegarde toutes les nuits, vous pouvez ajoutez un cron job
(:command:`crontab -e`), ici à 3h du matin :

.. code-block:: cfg

    00 3 * * *      /home/zope/MyProject/bin/backup -q

Vous allez voir dans la suite une configuration de buildout qui s'occupe de
créer le cron job à votre place.

Pour faire une restauration :

.. code-block:: sh

   $ bin/restore

Si vous voulez faire un backup de la production pour travailler ensuite en local, utilisez plutôt la commande :

.. code-block:: sh

    $ bin/snapshotbackup

qui créera une sauvegarde dans le dossier :file:`var/snapshotbackups/`, utile
pour ne pas perturber les sauvegardes normales qui se font la nuit.  Vous
récupérez ensuite la sauvegarde (les fichiers :file:`.fsz` et :file:`.dat`) via
:command:`scp` et vous placez la sauvegarde dans votre dossier
:file:`var/snapshotbackups/` en local et exécutez :command:`bin/snapshotrestore` en local.

Cron job pour zeopack et backup
===============================

Voici un exemple de configuration qui étend :file:`deployment.cfg` pour
réaliser un pack de la database avec la commande :command:`bin/zeopack` et 
faire un backup avec la commande :command:`bin/backup` vue précédemment.

Il synchronise également les dossiers :file:`backup/` et :file:`log/` sur un autre serveur.

Tout cela est réalisé par un job cron à 3h du matin.

.. centered:: :file:`deployment-backup.cfg`

.. literalinclude:: ./deploiement_buildout/deployment-backup.cfg
    :language: cfg

Dans cet exemple, la synchronisation se fait sur le serveur de secours/backup
*serveur1.example.com* avec le login *save*. Il vous faut préalablement partager
une clé publique entre ces deux serveurs pour que la commande :command:`rsync`
ne demande aucun mot de passe.

Pour utiliser cette configuration, exécutez :command:`bin/buildout -c
deployment-backup.cfg`.  Le cron job sera automatiquement ajouté dans le crontab
de l'utilisateur.

Configuration d'Apache
======================

Création d'un certificat autosigné :

.. code-block:: sh

   $ sudo mkdir -p /etc/apache2/ssl/
   $ sudo make-ssl-cert /usr/share/ssl-cert/ssleay.cnf \
   > /etc/apache2/ssl/server.crt

:file:`/etc/apache2/sites-available/kb` :

.. code-block:: apache

    NameVirtualHost 10.56.8.47:80

    <VirtualHost 10.56.8.47:80>
        ServerName devagile
        ServerAdmin anthony.sombris@devagile.fr
        ErrorLog /var/log/apache2/kb_error.log
        TransferLog /var/log/apache2/kb_access.log
        LogLevel warn
        RewriteEngine On
        RewriteRule ^/(.*) https://ssl.devagile/$1 [NC,R=301,L]

    </VirtualHost>

:file:`/etc/apache2/sites-available/ssl.kb` :

.. code-block:: apache

    NameVirtualHost 10.56.8.47:443

    <VirtualHost 10.56.8.47:443>
        ServerName ssl.devagile
        ServerAdmin anthony.sombris@devagile.fr
        ErrorLog /var/log/apache2/kb_error.log
        TransferLog /var/log/apache2/kb_access.log
        LogLevel warn

        SSLEngine On
        SSLCertificateFile /etc/apache2/ssl/server.crt
        #SSLCertificateKeyFile /etc/apache2/ssl/server.key

        RewriteEngine On
        RewriteRule ^/(.*) http://localhost:8000/VirtualHostBase/https/%{SERVER_NAME}:443/kb/VirtualHostRoot/$1 [L,P]

    </VirtualHost>

Activez les sites :

.. code-block:: sh

   $ a2ensite kb
   $ a2ensite ssl.kb

Activez les modules :

.. code-block:: sh

   $ a2enmod ssl
   $ a2enmod dav
   $ a2enmod proxy
   $ a2enmod proxy_http
   $ a2enmod rewrite

Éditez :file:`/etc/apache2/mods-enabled/proxy.conf` comme ceci :

.. code-block:: apache

    #Deny from all
    Allow from devagile

Activation de la compression
----------------------------

Activez le module *deflate* :

.. code-block:: sh

   $ a2enmod deflate

et éditez le fichier de configuration
:file:`/etc/apache2/mods-enabled/deflate.conf` :

.. code-block:: apache

   <IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css \
                          text/javascript application/x-javascript
   </IfModule>

Redémarrez Apache :

.. code-block:: sh

    $ /etc/init.d/apache2 restart

Configuration des DNS
=====================

Configurer vos DNS ou pour tester en local, éditez :file:`/etc/hosts` :

.. code-block:: text

    10.56.8.47 devagile ssl.devagile

Vous accéderez à votre site à partir de maintenant avec l'adresse
**http://devagile**.

Installation et configuration de CacheFu (< Plone 4)
====================================================

CacheFu est un module pour gérer les règles de cache HTTP pour Plone < 4.

Installation
------------

Pour installer CacheFu il suffit d'ajouter :mod:`Products.CacheSetup`
soit dans la liste des eggs de votre buildout, soit en tant que dépendance à
l'un de vos projets dans le :file:`setup.py`.
Vous devez ensuite l'installer par la suite comme un module supplémentaire
dans le panneau de configuration de Plone via l'utilitaire 
:guilabel:`Ajout/Suppression de produits`.

Configuration
-------------

Allez avec le navigateur en tant qu'administrateur dans
:guilabel:`Configuration du site`
-> :guilabel:`Cache Configuration Tool` et configurez de la manière suivante :

- Cocher Enable CacheFu
- Active Cache Policy: With Caching Proxy
- Proxy Cache Purge Configuration: Purge with VHM URLS
- Site Domains: https://ssl.devagile:443
- Proxy Cache Domains: http://127.0.0.1:8000
- Compression: Never

Installation et configuration de plone.app.caching (>= Plone 4)
===============================================================

:mod:`plone.app.caching` propose comme CacheFu une interface graphique pour gérer
les règles de cache HTTP pour Plone 4. Il est construit sur :mod:`z3c.caching`,
:mod:`plone.caching` et :mod:`plone.cachepurging`.

Installation
------------

Pour installer plone.app.caching il suffit de l'ajouter soit dans la liste
des eggs de votre buildout, soit en tant que dépendance à l'un de vos projets
dans le :file:`setup.py`.
Vous devez ensuite l'installer par la suite comme un module supplémentaire
dans le panneau de configuration de Plone via l'utilitaire d'ajout de modules.
Comme ce module dépend d'un certain nombre de modules qui ne sont pas fournis
par Plone, il est plus sûr de geler les versions dans votre buildout comme
suit :

.. code-block:: cfg

    extends =
        # ...
	http://good-py.appspot.com/release/plone.app.caching/1.0b1

Vous pouvez avoir une vue des versions disponibles ici :
http://good-py.appspot.com/release/plone.app.caching

.. note::

    http://good-py.appspot.com est une application Google App Engine créée par
    Martin Aspeli pour gérer un ensemble de KGS (Know Good Set),
    avec des contraintes de versions compatibles et incompatibles. Par exemple
    pour récupérer le KGS de plone.app.caching et de five.grok, vous pouvez
    utiliser l'url suivante :
    http://good-py.appspot.com/release/plone.app.caching/1.0b1?five.grok=1.1.2
    Pour récupérer un KGS de five.grok compatible avec Plone 3.3 qui utilise 
    Zope 2.10.x : http://good-py.appspot.com/release/five.grok/1.1.2?zope=2.10.x

Le panneau de configuration de la gestion de cache
--------------------------------------------------

Une fois installé vous allez trouver au niveau de la configuration de votre
site un lien pour configurer les règles de cache de votre site.

Cette interface graphique est constituée de quatre onglets :

1. *Changer la configuration* (Change settings) : pour gérer le comportement
   du cache HTTP

2. *Importer une configuration* (Import settings) : vous permet d'importer
   des politiques de cache prédéfinies

3. *Purger le proxy cache* (Purge caching proxy) : vous permet de lancer des
   purges manuelles sur les caches proxy

4. *RAM cache* : fournit des informations statistiques sur le cache en RAM
   et son éventuelle purge.

Configuration
-------------

Dans notre exemple, nous avons un cache proxy varnish derrière Apache.
Pour configurer cette chaine, faire ce qui suit :

- Cliquer sur :guilabel:`Import settings`, sélectionner
  :guilabel:`With caching proxy`, cliquer sur :guilabel:`Import`
- Retourner dans :guilabel:`Change settings`, dans 
  :guilabel:`Global settings`, cocher :guilabel:`Enable caching`
- Dans l'onglet :guilabel:`Caching proxies`, cocher :guilabel:`Enable purging`
- Ajouter http://127.0.0.1:8000 dans les `Caching proxies`.
- Cocher `Virtual host rewriting takes place front of the caching proxy` car
  les adresses sont réécritent par Apache avec le RewriteRule.
- Dans `Externally facing domains`, mettre https://ssl.devagile:443
- Cliquer sur `Save`

Le mieux après est d'exporter cette configuration dans formation.policy.
Pour cela aller dans portal_setup, export, registry.
Ajouter le fichier registry.xml dans votre dossier :file:`profiles/default/`.
Eventuellement nettoyer ce fichier, seules les clés commencant par
plone.app.caching nous intéressent.

Pour aller plus loin :
http://dev.plone.org/plone/browser/plone.app.caching/trunk/README.txt

Tester
------

Vous pouvez tester que votre configuration fonctionne bien en inspectant
les requêtes HTTP avec l'extension Firebug de Firefox par exemple.


Ressources
==========

- `Varnish Guru Meditation on timeout <http://vincentfretin.ecreall.com/articles/varnish-guru-meditation-on-timeout>`_
- `Plone Scaling and Performance <http://scalingplone.pbworks.com/>`__ par Elizabeth Leddy

Apache et Zope, VirtualHostMonster :

- http://plone.org/documentation/tutorial/plone-apache/vhm/
- http://plone.org/documentation/how-to/plone-with-apache
- http://www.zope.org/Documentation/Books/ZopeBook/2_6Edition/VirtualHosting.stx
- http://wiki.zope.org/zope2/ZopeAndApache
- http://doc.ubuntu-fr.org/tutoriel/securiser_apache2_avec_ssl

Erreurs PosKey dans vos ZODB storages :

- `Checking your ZODB storages for PosKey errors <http://www.zopyx.de/blog/checking-your-zodb-storages-for-poskey-errors>`__

Exercice
========

Geler toutes les versions des eggs utilisés dans le buildout.

Ajout de la recipe collective.recipe.backup dans le buildout pour réaliser un backup régulier de la base de données.
