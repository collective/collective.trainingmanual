.. -*- coding: utf-8 -*-

.. _plus-loin-zcml:

====================
Pour aller plus loin
====================


Comprendre une directive ZCML
=============================

L'une des explications sur une directive ci-dessus vous parait floue, ou bien
une directive fournie par un composant de tierce partie n'est pas correctement
documentée ? Voici la méthode pour pister la définition d'une directive ZCML
quelconque.

La directive est exposée à partir d'un namespace, il vous faudra donc trouver un
fichier :file:`meta.zcml` dans lequel est définie cette directive.

En supposant que la directive s'appelle ``foo`` et qu'elle est exposée par le
namespace ``http://namespace.mydomain.tld/bar``, il vous faudra trouver, à
l'aide des commandes shell :command:`find` et :command:`grep` un fichier
:file:`meta.zcml` dans lequel figure quelque-chose comme ceci :

.. code-block:: xml

   namespace="http://namespace.mydomain.tld/bar"
   ...
   name="foo"

Si vous ne le trouvez pas, c'est que vous avez mal cherché, car il se trouve
forcément quelque part dans l'un des packages de votre projet.

Vous trouverez donc (si, si !) un fichier :file:`meta.zcml` qui contiendra
quelque chose comme ceci :

.. code-block:: xml

   <configure
      xmlns="http://namespaces.zope.org/zope"
      xmlns:meta="http://namespaces.zope.org/meta"
      >
      ...
      <meta:directives namespace="http://namespace.mydomain.tld/bar">
         ...
         <meta:directive
            name="foo"
            schema="bar.zcml.IFooDirective"
            handler="bar.zcml.foo" />
         ...
      </meta:directives>
      ...
   </configure>

Ce qui signifie que les attributs de l'élément de configuration ``<foo ...>``
sont définis dans la classe :class:`bar.zcml.IFooDirective` et que l'élément
sera traité par la fonction :func:`bar.zcml.foo`.

La classe :class:`bar.zcml.IFooDirective` est une interface (sous-classant
:class:`zope.interface.Interface`) et ses attributs sont définis par des objets
des modules :mod:`zope.configuration.fields` ou de :mod:`zope.schema` et sont
généralement abondament commentés.

Le handler :func:`bar.zcml.foo` prend pour paramètres un objet implémentant
:class:`zope.configuration.interfaces.IConfigurationContext` ainsi que
l'ensemble des attributs de l'émément ``<foo ..>``.

Le reste, c'est la lecture du code Python, généralement assez facile, qui vous
l'apprendra.

Autres ressources
=================

Pour aller plus loin, `cet article de blog
<http://glenfant.wordpress.com/2008/05/09/doing-my-zcml/>`_ explique en détails
comment faire sa propre directive ZCML.

Quelques composants simples pour Zope et Plone qui exposent leur propre
vocabulaire ZCML :

* `collective.monkeypatcher
  <http://pypi.python.org/pypi/collective.monkeypatcher>`_ permet d'effectuer
  des monkey patches Python d'une façon documentée et rationnelle.

* `archetypes.configure <http://pypi.python.org/pypi/archetypes.configure>`_
  évite la fastidieuse déclaration de types en Python dans les packages
  fournissant des types de contenus Archetypes
